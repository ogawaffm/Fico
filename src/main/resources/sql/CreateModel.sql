CREATE TABLE SCAN (
    SCAN_ID       BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    PROCESS_ID    BIGINT,
    HOST_NAME     VARCHAR(63),
    USER_NAME     VARCHAR(63),
    ROOT          VARCHAR(512) NOT NULL,
    STARTED       TIMESTAMP,
    FINISHED      TIMESTAMP
)

CREATE TABLE FILE (
//                      FILE_ID           BIGINT PRIMARY KEY,
                      FILE_ID           BIGINT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    DIR_ID            BIGINT,
    SCAN_ID           BIGINT NOT NULL,
    PATH              VARCHAR(512) NOT NULL,
    NAME              VARCHAR(512) NOT NULL,
    SIZE              BIGINT,
    IS_DIR            BOOLEAN,
    FILES_CONTAINED   INTEGER,
    DIRS_CONTAINED    INTEGER,
    MODIFICATION_TIME TIMESTAMP NOT NULL,
    CREATION_TIME     TIMESTAMP NOT NULL,
    CHECKSUM          VARBINARY(32) DEFAULT X'0000000000000000000000000000000000000000000000000000000000000000',
    CALC_STARTED      TIMESTAMP,
    CALC_FINISHED     TIMESTAMP
)


--          "ALTER TABLE FILE ADD FOREIGN KEY (DIR_ID) REFERENCES FILE (FILE_ID) ON DELETE CASCADE
ALTER TABLE FILE ADD FOREIGN KEY (SCAN_ID) REFERENCES SCAN (SCAN_ID) ON DELETE CASCADE

CREATE INDEX DIR_ID ON FILE (DIR_ID)

CREATE UNIQUE INDEX SCAN_ID_DIR_ID_NAME ON FILE (SCAN_ID, DIR_ID, NAME)

CREATE INDEX NAME ON FILE (NAME)

CREATE INDEX SIZE ON FILE (SIZE)

CREATE INDEX MODIFICATION_TIME ON FILE (MODIFICATION_TIME)

-- to select #00 checksums (Mark as duplicate candidates)
CREATE INDEX CHECKSUM ON FILE (CHECKSUM)

-- to select duplicate candidates to mark with #00 checksum
CREATE INDEX SIZE_NAME ON FILE (SIZE, NAME)

CREATE INDEX EQUAL ON FILE (SIZE, NAME, CHECKSUM)

CREATE VIEW SCAN_STAT AS (
    SELECT SCAN.SCAN_ID SCAN_ID, ROOT, STARTED, FINISHED,
        SUM(CASE WHEN IS_DIR = FALSE THEN SIZE ELSE 0 END) AS SIZE,
        SUM(CASE WHEN IS_DIR = TRUE THEN 1 ELSE 0 END) AS DIR_COUNT,
        SUM(CASE WHEN IS_DIR = FALSE THEN 1 ELSE 0 END) AS FILE_COUNT,
        MIN(CASE WHEN IS_DIR = TRUE THEN MODIFICATION_TIME END) AS MIN_DIR_MODIFICATION_TIME,
        MAX(CASE WHEN IS_DIR = TRUE THEN MODIFICATION_TIME END) AS MAX_DIR_MODIFICATION_TIME,
        MIN(CASE WHEN IS_DIR = TRUE THEN CREATION_TIME END) AS MIN_DIR_CREATION_TIME,
        MAX(CASE WHEN IS_DIR = TRUE THEN CREATION_TIME END) AS MAX_DIR_CREATION_TIME,
        MIN(CASE WHEN IS_DIR = FALSE THEN MODIFICATION_TIME END) AS MIN_FILE_MODIFICATION_TIME,
        MAX(CASE WHEN IS_DIR = FALSE THEN MODIFICATION_TIME END) AS MAX_FILE_MODIFICATION_TIME,
        MIN(CASE WHEN IS_DIR = FALSE THEN CREATION_TIME END) AS MIN_FILE_CREATION_TIME,
        MAX(CASE WHEN IS_DIR = FALSE THEN CREATION_TIME END) AS MAX_FILE_CREATION_TIME,
        COUNT(DISTINCT
            CASE WHEN CHECKSUM = X'0000000000000000000000000000000000000000000000000000000000000000'
                      OR CHECKSUM = X'00' THEN NULL ELSE CHECKSUM END
        ) AS CHECKSUM_COUNT_DISTINCT,
        COUNT(
            CASE WHEN CHECKSUM = X'0000000000000000000000000000000000000000000000000000000000000000'
                      OR CHECKSUM = X'00' THEN NULL ELSE CHECKSUM END
        ) AS CHECKSUM_COUNT_ALL,
        MIN(CALC_STARTED) AS FIRST_CHECKSUM_FINISHED,
        MAX(CALC_FINISHED) AS LAST_CHECKSUM_FINISHED
    FROM SCAN
    JOIN FILE
        ON (SCAN.SCAN_ID = FILE.SCAN_ID)
    GROUP BY SCAN.SCAN_ID, ROOT, STARTED, FINISHED
)

CREATE VIEW FILE_STAT AS (
    SELECT FILE.*,
        LENGTH(PATH) -  LENGTH(REPLACE(PATH, '\', ''))
            - CASE WHEN SUBSTRING(PATH, 1, 2) = '\\' THEN 3 ELSE 1 END AS DEPTH,
        SUBSTR(NAME, 1, 1) = '.' IS_HIDDEN,
        SUBSTR(NAME, 1, 1) = '~' IS_TEMP,
        CASE WHEN FILE.IS_DIR = TRUE THEN
            'RMDIR "' || FILE.PATH || '\' || FILE.NAME || '" /S /Q'
        ELSE
            'DEL "' || FILE.PATH || '\' || FILE.NAME || '" /A'
        END DROP
    FROM FILE
)

CREATE VIEW FILE_DUPLICATE AS (
    SELECT FILE_STAT.*, DUP.DUP_COUNT, DUP.DUP_SIZE, DUP.DUP_SAVABLE
    FROM FILE_STAT
    JOIN (SELECT CHECKSUM, COUNT(CHECKSUM) DUP_COUNT, SUM(SIZE) DUP_SIZE,
          CAST(SUM(SIZE) - SUM(SIZE)/COUNT(CHECKSUM) AS BIGINT) DUP_SAVABLE
          FROM FILE
          WHERE CHECKSUM IS NOT NULL
          GROUP BY CHECKSUM
          HAVING COUNT(CHECKSUM) > 1
    ) AS DUP
    ON FILE_STAT.CHECKSUM = DUP.CHECKSUM
    ORDER BY DUP.DUP_SAVABLE DESC, FILE_STAT.CHECKSUM, FILE_STAT.NAME
)